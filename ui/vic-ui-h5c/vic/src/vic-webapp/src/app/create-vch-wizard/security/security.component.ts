/*
 Copyright 2017 VMware, Inc. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
import { Component, OnInit, EventEmitter, Input } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Observable } from 'rxjs/Observable';
import { Http, URLSearchParams } from '@angular/http';
import 'rxjs/add/observable/timer';
import { CreateVchWizardService } from '../create-vch-wizard.service';

@Component({
    selector: 'vic-vch-creation-security',
    templateUrl: './security.html',
    styleUrls: ['./security.scss']
})
export class SecurityComponent implements OnInit {
    public form: FormGroup;
    public formErrMessage = '';
    public inAdvancedMode = false;
    public signpostOpenState = false;
    @Input() vchName: string;

    // tmp
    private _isSetup = false;

    constructor(
        private formBuilder: FormBuilder,
        private createWzService: CreateVchWizardService
    ) {
        this.form = formBuilder.group({
            useTls: true,
            tlsCertPath: '',
            serverCertSource: 'autogenerated',
            tlsCname: '',
            organization: '',
            certificateKeySize: '2048',
            tlsServerCert: '',
            tlsServerKey: '',
            useClientAuth: true,
            clientCertSource: 'autogenerated',
            tlsCas: formBuilder.array([this.createNewTlsCaEntry()]),
            useWhitelistRegistry: false,
            insecureRegistries: formBuilder.array([this.createNewInsecureRegistryEntry()]),
            whitelistRegistries: formBuilder.array([this.createNewWhitelistRegistryEntry()]),
            registryCas: formBuilder.array([this.createNewRegistryCaEntry()]),
            opsUser: ''
        });
    }

    // TODO: function that calls a service's method to load WIP data and replace form values

    ngOnInit() {

    }

    addNewTlsCaEntry() {
        const tlsCas = this.form.get('tlsCas') as FormArray;
        tlsCas.push(this.createNewTlsCaEntry());
    }

    removeTlsCaEntry(index: number) {
        const tlsCas = this.form.get('tlsCas') as FormArray;
        tlsCas.removeAt(index);
    }

    createNewTlsCaEntry() {
        return this.formBuilder.group({
            tlsCa: ''
        });
    }

    addNewInsecureRegistryEntry() {
        const insecureRegistries = this.form.get('insecureRegistries') as FormArray;
        insecureRegistries.push(this.createNewInsecureRegistryEntry());
    }

    removeInsecureRegistryEntry(index: number) {
        const insecureRegistries = this.form.get('insecureRegistries') as FormArray;
        insecureRegistries.removeAt(index);
    }

    createNewInsecureRegistryEntry() {
        return this.formBuilder.group({
            insecureRegistryIp: '',
            insecureRegistryPort: ''
        });
    }

    addNewWhitelistRegistryEntry() {
        const whitelistRegistries = this.form.get('whitelistRegistries') as FormArray;
        whitelistRegistries.push(this.createNewWhitelistRegistryEntry());
    }

    removeWhitelistRegistryEntry(index: number) {
        const whitelistRegistries = this.form.get('whitelistRegistries') as FormArray;
        whitelistRegistries.removeAt(index);
    }

    createNewWhitelistRegistryEntry() {
        return this.formBuilder.group({
            whitelistRegistry: '',
            whitelistRegType: 'secure'
        });
    }

    addNewRegistryCaEntry() {
        const registryCas = this.form.get('registryCas') as FormArray;
        registryCas.push(this.createNewRegistryCaEntry());
    }

    removeRegistryCaEntry(index: number) {
        const registryCas = this.form.get('registryCas') as FormArray;
        registryCas.removeAt(index);
    }

    createNewRegistryCaEntry() {
        return this.formBuilder.group({
            registryCa: ''
        });
    }

    onPageLoad() {
        if (this._isSetup) {
            return;
        }
        this.form.get('tlsCertPath').setValue(`./${this.vchName}/`);
        this.form.get('organization').setValue(this.vchName);
        this._isSetup = true;
    }

    onCommit(): Observable<any> {
        const errs: string[] = [];
        const results: any = {};

        const useTlsValue = this.form.get('useTls').value;
        const serverCertSourceValue = this.form.get('serverCertSource').value;
        const clientCertSourceValue = this.form.get('clientCertSource').value;

        const tlsCnameValue = this.form.get('tlsCname').value;
        const orgValue = this.form.get('organization').value;
        const certKeySizeValue = this.form.get('certificateKeySize').value;
        const tlsServerCertValue = this.form.get('tlsServerCert').value;
        const tlsServerKeyValue = this.form.get('tlsServerKey').value;

        const useClientAuthValue = this.form.get('useClientAuth').value;
        const tlsCasValue = this.form.get('tlsCas').value;

        // Docker API Access
        if (!useTlsValue) {
            // if tls is off, use --no-tls
            results['noTls'] = true;
        } else {
            results['tlsCertPath'] = `./${this.vchName}/`;
            if (serverCertSourceValue === 'autogenerated') {
                if (tlsCnameValue) {
                    results['tlsCname'] = tlsCnameValue;
                }
                if (orgValue) {
                    results['organization'] = orgValue;
                }
                if (certKeySizeValue) {
                    results['certificateKeySize'] = certKeySizeValue;
                }
            } else {
                results['tlsServerCert'] = tlsServerCertValue;
                results['tlsServerKey'] = tlsServerKeyValue;
            }

            if (!useClientAuthValue) {
                results['noTlsverify'] = true;
                results['tlsCa'] = [];
            } else {
                results['tlsCa'] = clientCertSourceValue === 'existing' ?
                    tlsCasValue.map(val => val['tlsCa']).filter(val => val) : [];
            }
        }

        // Registry Access
        const useWhitelistRegistryValue = this.form.get('useWhitelistRegistry').value;
        const insecureRegistriesValue = this.form.get('insecureRegistries').value;
        const whitelistRegistriesValue = this.form.get('whitelistRegistries').value;
        const registryCasValue = this.form.get('registryCas').value;

        if (!useWhitelistRegistryValue) {
            results['whitelistRegistry'] = [];
            results['insecureRegistry'] = insecureRegistriesValue.filter(val => {
                return val['insecureRegistryIp'] && val['insecureRegistryPort'];
            }).map(val => `${val['insecureRegistryIp']}:${val['insecureRegistryPort']}`);
        } else {
            const white = [];
            const insecure = [];
            whitelistRegistriesValue.filter(val => {
                return val['whitelistRegistry'];
            }).forEach(val => {
                if (val['whitelistRegType'] === 'secure') {
                    white.push(val['whitelistRegistry']);
                } else {
                    insecure.push(val['whitelistRegistry']);
                }
            });

            results['whitelistRegistry'] = white;
            results['insecureRegistry'] = insecure;
        }

        results['registryCa'] = registryCasValue.filter(val => {
            return val['registryCa'];
        }).map(val => val.registryCa);

        // Operations User
        const opsUserValue = this.form.get('opsUser').value;
        if (opsUserValue) {
            results['opsUser'] = opsUserValue;
        }


        // user id & vc thumbprint
        results['user'] = this.createWzService.getUserId();
        results['thumbprint'] = this.createWzService.getServerThumbprint();

        return Observable.of({ security: results });
    }

    toggleAdvancedMode() {
        this.inAdvancedMode = !this.inAdvancedMode;
    }
}
